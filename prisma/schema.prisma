// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  // pi network platform user credentials
  username    String
  accessToken String
  uid         String @unique

  isActive      Boolean @default(true)
  /// points accrued for active ecosystem participation / bought
  points        Float   @default(10)
  /// username of user's referrer
  referrer      String?
  /// no of users referred
  noOfReferrals Int     @default(0)

  // Relationships
  plantedTrees      Tree[]
  treeVerifications TreeVerification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tree {
  id             String  @id @default(cuid())
  code           String  @unique @default(uuid())
  additionalInfo String?
  latitude       Float
  longitude      Float

  isAuthentic   Boolean   @default(false)
  rewardClaimed Boolean   @default(false)
  dateVerified  DateTime?

  planter   User   @relation(fields: [planterId], references: [id])
  planterId String

  mediaEvidence Media[]
  verifications TreeVerification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TreeVerification {
  id              String  @id @default(cuid())
  rewardClaimed   Boolean @default(false)
  treeIsAuthentic Boolean
  additionalInfo  String?

  mediaEvidence Media[]

  tree       Tree   @relation(fields: [treeId], references: [id])
  treeId     String
  verifier   User   @relation(fields: [verifierId], references: [id])
  verifierId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id   String    @id @default(cuid())
  url  String    @unique
  type MediaType

  treeVerification   TreeVerification? @relation(fields: [treeVerificationId], references: [id])
  treeVerificationId String?
  tree               Tree?             @relation(fields: [treeId], references: [id])
  treeId             String?
}

model Payment {
  amount     Float
  txId       String?
  paymentId  String              @unique
  isRefunded Boolean             @default(false)
  type       PiTransactionType
  status     PiTransactionStatus @default(INITIALIZED)
  purposeId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MediaType {
  IMAGE
  VIDEO
}

enum PiTransactionType {
  DONATE
}

enum PiTransactionStatus {
  INITIALIZED
  COMPLETED
  CANCELLED
}
